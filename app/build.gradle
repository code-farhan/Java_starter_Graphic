/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}


plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.11'
    id 'java'
    id 'org.beryx.jlink' version "2.25.0"
    id 'org.javamodularity.moduleplugin' version("1.8.10")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'javax.json:javax.json-api:1.1.4'
}

application {
    // Define the main class for the application.
    mainClass = 'com.xgao.App'
}

javafx {
    version = '17'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web']
}

jar {
    manifest{
        attributes 'Main-Class': 'com.xgao.App'
    }
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java"]
            includes = ["**/*.css"]
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


run {
    //jvmArgs = ['-Djdk.gtk.version=2'] // required due to a bug in Java: https://github.com/javafxports/openjdk-jfx/issues/175
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Java GUI'
        //jvmArgs = ['-Djdk.gtk.version=2'] // required due to a bug in Java: https://github.com/javafxports/openjdk-jfx/issues/175
    }
    jpackage {
        installerOptions = [
                '--description', 'Java Gui App',
                '--vendor', 'Xiangshuai Gao',
                '--copyright', 'Copyrigth 2015-2019 Xianshuai Gao'
        ]
        installerType = project.findProperty('installerType') // we will pass this from the command line (example: -PinstallerType=msi)
        if (installerType == 'msi') {
            imageOptions += ['--icon', '/home/xgao/storage/JavaGUI/app_data/images/Logo.png']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', '/home/xgao/storage/JavaGUI/app_data/images/Logo.png']
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', '/home/xgao/storage/JavaGUI/app_data/images/Logo.png']
            installerOptions += [
                    '--linux-menu-group', 'Office',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'gaoxiangshuai@gmail.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'MIT'
            ]
        }
    }
}

jpackage {
    doFirst {
        project.getProperty('installerType') // throws exception if its missing
    }
}

tasks.jlink.doLast {
    copy {
        from("../") {
            include "app_data/**"
        }
        into "./build/image/bin"
    }
}